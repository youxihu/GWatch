// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"GWatch/internal/app/usecase"
	"GWatch/internal/domain/collector"
	"GWatch/internal/domain/config"
	"GWatch/internal/domain/logger"
	monitoring2 "GWatch/internal/domain/monitoring"
	"GWatch/internal/domain/scheduled_push"
	"GWatch/internal/domain/ticker"
	"GWatch/internal/entity"
	"GWatch/internal/infra/collector/external"
	"GWatch/internal/infra/collector/host"
	"GWatch/internal/infra/config"
	logger2 "GWatch/internal/infra/logger"
	"GWatch/internal/infra/monitoring"
	scheduled_push2 "GWatch/internal/infra/scheduled_push"
	ticker2 "GWatch/internal/infra/ticker"
	"GWatch/internal/infra/ticker/auth"
	"github.com/google/wire"
	"log"
	"os"
	"os/signal"
	"syscall"
)

// Injectors from wire.go:

// InitializeApp 初始化应用程序的所有依赖
func InitializeApp() (*App, error) {
	provider, err := NewConfigProvider()
	if err != nil {
		return nil, err
	}
	config := NewConfig(provider)
	hostCollector := NewHostCollector()
	redisClient := NewRedisCollector(provider)
	mySQLCollector := NewMySQLCollector(provider)
	httpCollector := NewHTTPCollector(provider)
	evaluator := NewEvaluator()
	basePolicy := NewBasePolicy()
	formatter := NewMarkdownFormatter()
	notifier := NewDingTalkNotifier(provider)
	baseMonitoringUseCase := NewBaseMonitoringUseCase(hostCollector, redisClient, mySQLCollector, httpCollector, evaluator, basePolicy, formatter, notifier)
	httpPolicy := NewHTTPPolicy()
	httpMonitoringUseCase := NewHTTPMonitoringUseCase(hostCollector, redisClient, mySQLCollector, httpCollector, evaluator, httpPolicy, formatter, notifier)
	coordinator := NewCoordinator(baseMonitoringUseCase, httpMonitoringUseCase, basePolicy, httpPolicy)
	tokenProvider := NewTokenProvider()
	tickerCollector := NewTickerCollector(tokenProvider)
	systemMetricsService := NewSystemMetricsService(hostCollector, redisClient, httpCollector)
	tickerFormatter := NewTickerMarkdownFormatter()
	tickerUseCase := NewTickerUseCase(tickerCollector, tokenProvider, systemMetricsService, evaluator, formatter, tickerFormatter, notifier)
	tickerScheduler := NewTickerScheduler(tickerUseCase)
	scheduledPushAlertStorage := NewScheduledPushAlertStorage(config)
	scheduledPushUseCase := NewScheduledPushUseCase(hostCollector, redisClient, httpCollector, tickerCollector, tokenProvider, systemMetricsService, evaluator, formatter, notifier, scheduledPushAlertStorage)
	scheduledPushScheduler := NewScheduledPushScheduler(scheduledPushUseCase)
	loggerFactory := NewLoggerFactory(config)
	logger := NewLogger(loggerFactory)
	loggerService := NewLoggerService(logger)
	app := NewApp(config, coordinator, tickerScheduler, scheduledPushScheduler, loggerService)
	return app, nil
}

// wire.go:

// BasePolicy 基础告警策略类型别名
type BasePolicy *monitoring.StatefulPolicy

// HTTPPolicy HTTP告警策略类型别名
type HTTPPolicy *monitoring.StatefulPolicy

// BaseMonitoringUseCase 基础监控用例类型别名
type BaseMonitoringUseCase *usecase.MonitoringUseCase

// HTTPMonitoringUseCase HTTP监控用例类型别名
type HTTPMonitoringUseCase *usecase.MonitoringUseCase

// ProviderSet 定义所有基础设施提供者
var ProviderSet = wire.NewSet(

	NewConfigProvider,
	NewConfig,

	NewHostCollector,
	NewRedisCollector,
	NewMySQLCollector,
	NewHTTPCollector,
	NewTickerCollector,

	NewTokenProvider,

	NewEvaluator,
	NewMarkdownFormatter,
	NewTickerMarkdownFormatter,

	NewDingTalkNotifier,

	NewBasePolicy,
	NewHTTPPolicy,

	NewSystemMetricsService,

	NewBaseMonitoringUseCase,
	NewHTTPMonitoringUseCase,
)

// NewConfigProvider 创建配置提供者
func NewConfigProvider() (config.Provider, error) {
	return configimpl.NewYAMLProvider("config/config.yml")
}

// NewHostCollector 创建主机信息收集器
func NewHostCollector() collector.HostCollector {
	return host.New()
}

// NewRedisCollector 创建 Redis 收集器
func NewRedisCollector(provider config.Provider) usecase.RedisClient {
	return external.NewRedisCollector(provider)
}

// NewMySQLCollector 创建MySQL收集器
func NewMySQLCollector(provider config.Provider) collector.MySQLCollector {
	return external.NewMySQLCollector(provider)
}

// NewHTTPCollector 创建 HTTP 收集器
func NewHTTPCollector(provider config.Provider) collector.HTTPCollector {
	return external.NewHTTPCollector(provider)
}

// NewTickerCollector 创建 Ticker 收集器
func NewTickerCollector(tokenProvider ticker.TokenProvider) ticker.TickerCollector {
	return ticker2.NewTickerCollector(tokenProvider)
}

// NewTokenProvider 创建 Token 提供者
func NewTokenProvider() ticker.TokenProvider {
	return auth.NewTokenProvider()
}

// NewEvaluator 创建评估器
func NewEvaluator() monitoring2.Evaluator {
	return monitoring.NewSimpleEvaluator()
}

// NewMarkdownFormatter 创建 Markdown 格式化器
func NewMarkdownFormatter() monitoring2.Formatter {
	return monitoring.NewMarkdownFormatter()
}

// NewTickerMarkdownFormatter 创建 Ticker Markdown 格式化器
func NewTickerMarkdownFormatter() monitoring2.TickerFormatter {
	return monitoring.NewTickerMarkdownFormatter().(monitoring2.TickerFormatter)
}

// NewDingTalkNotifier 创建钉钉通知器
func NewDingTalkNotifier(provider config.Provider) monitoring2.Notifier {
	return monitoring.NewDingTalkNotifier(provider)
}

// NewBasePolicy 创建基础告警策略
func NewBasePolicy() BasePolicy {
	return monitoring.NewStatefulPolicy().(*monitoring.StatefulPolicy)
}

// NewHTTPPolicy 创建 HTTP 告警策略
func NewHTTPPolicy() HTTPPolicy {
	return monitoring.NewStatefulPolicy().(*monitoring.StatefulPolicy)
}

// NewBaseMonitoringUseCase 创建基础监控用例
func NewBaseMonitoringUseCase(
	hostInfo collector.HostCollector,
	redisInfo usecase.RedisClient,
	mysqlInfo collector.MySQLCollector,
	httpInfo collector.HTTPCollector,
	evaluator monitoring2.Evaluator,
	policy BasePolicy,
	formatter monitoring2.Formatter,
	notifier monitoring2.Notifier,
) BaseMonitoringUseCase {
	return usecase.NewMonitoringUseCase(
		hostInfo,
		redisInfo,
		mysqlInfo,
		httpInfo,
		evaluator,
		(*monitoring.StatefulPolicy)(policy),
		formatter,
		notifier,
	)
}

// NewHTTPMonitoringUseCase 创建HTTP监控用例
func NewHTTPMonitoringUseCase(
	hostInfo collector.HostCollector,
	redisInfo usecase.RedisClient,
	mysqlInfo collector.MySQLCollector,
	httpInfo collector.HTTPCollector,
	evaluator monitoring2.Evaluator,
	policy HTTPPolicy,
	formatter monitoring2.Formatter,
	notifier monitoring2.Notifier,
) HTTPMonitoringUseCase {
	return usecase.NewMonitoringUseCase(
		hostInfo,
		redisInfo,
		mysqlInfo,
		httpInfo,
		evaluator,
		(*monitoring.StatefulPolicy)(policy),
		formatter,
		notifier,
	)
}

// NewSystemMetricsService 创建系统指标服务
func NewSystemMetricsService(
	hostInfo collector.HostCollector,
	redisInfo usecase.RedisClient,
	httpInfo collector.HTTPCollector,
) *usecase.SystemMetricsService {
	return usecase.NewSystemMetricsService(hostInfo, redisInfo, httpInfo)
}

// NewTickerUseCase 创建 Ticker 用例
func NewTickerUseCase(
	tickerInfo ticker.TickerCollector,
	tokenProvider ticker.TokenProvider,
	systemMetricsService *usecase.SystemMetricsService,
	evaluator monitoring2.Evaluator,
	formatter monitoring2.Formatter,
	tickerFormatter monitoring2.TickerFormatter,
	notifier monitoring2.Notifier,
) ticker.TickerUseCase {
	return usecase.NewTickerUseCase(
		tickerInfo,
		tokenProvider,
		systemMetricsService,
		evaluator,
		formatter,
		tickerFormatter,
		notifier,
	)
}

// NewCoordinator 创建协调器
func NewCoordinator(
	runnerBase BaseMonitoringUseCase,
	runnerHTTP HTTPMonitoringUseCase,
	policyBase BasePolicy,
	policyHTTP HTTPPolicy,
) *usecase.Coordinator {
	return usecase.NewCoordinator(
		(*usecase.MonitoringUseCase)(runnerBase),
		(*usecase.MonitoringUseCase)(runnerHTTP),
		(*monitoring.StatefulPolicy)(policyBase),
		(*monitoring.StatefulPolicy)(policyHTTP),
	)
}

// NewTickerScheduler 创建 Ticker 调度器
func NewTickerScheduler(tickerRunner ticker.TickerUseCase) ticker.TickerScheduler {
	return usecase.NewTickerScheduler(tickerRunner)
}

// NewScheduledPushUseCase 创建全局定时推送用例
func NewScheduledPushUseCase(
	hostInfo collector.HostCollector,
	redisInfo usecase.RedisClient,
	httpInfo collector.HTTPCollector,
	tickerInfo ticker.TickerCollector,
	tokenProvider ticker.TokenProvider,
	systemMetricsService *usecase.SystemMetricsService,
	evaluator monitoring2.Evaluator,
	formatter monitoring2.Formatter,
	notifier monitoring2.Notifier,
	alertStorage scheduled_push.ScheduledPushAlertStorage,
) scheduled_push.ScheduledPushUseCase {
	return usecase.NewScheduledPushUseCase(
		hostInfo,
		redisInfo,
		httpInfo,
		tickerInfo,
		tokenProvider,
		systemMetricsService,
		evaluator,
		formatter,
		notifier,
		alertStorage,
	)
}

// NewScheduledPushAlertStorage 创建全局定时推送告警存储
func NewScheduledPushAlertStorage(config2 *entity.Config) scheduled_push.ScheduledPushAlertStorage {
	if config2.ScheduledPush == nil || config2.ScheduledPush.AlertStorage == nil {
		return nil
	}
	return scheduled_push2.NewFileAlertStorage(config2.ScheduledPush.AlertStorage)
}

// NewScheduledPushScheduler 创建全局定时推送调度器
func NewScheduledPushScheduler(scheduledPushUseCase scheduled_push.ScheduledPushUseCase) scheduled_push.ScheduledPushScheduler {
	return usecase.NewScheduledPushScheduler(scheduledPushUseCase)
}

// NewLoggerFactory 创建日志工厂
func NewLoggerFactory(config2 *entity.Config) logger.LoggerFactory {
	return logger2.NewLoggerFactory(&config2.Log)
}

// NewLogger 创建日志器
func NewLogger(factory logger.LoggerFactory) logger.Logger {
	logger3, err := factory.CreateLogger()
	if err != nil {

		return logger2.NewConsoleLogger()
	}
	return logger3
}

// NewLoggerService 创建日志服务
func NewLoggerService(logger3 logger.Logger) *usecase.LoggerService {
	return usecase.NewLoggerService(logger3)
}

// App 应用程序结构体，包含所有需要的组件
type App struct {
	Config                 *entity.Config
	Coordinator            *usecase.Coordinator
	TickerScheduler        ticker.TickerScheduler
	ScheduledPushScheduler scheduled_push.ScheduledPushScheduler
	LoggerService          *usecase.LoggerService
}

// Start 启动应用程序
func (app *App) Start() error {
	log.Println("开始监控...")

	app.printMonitoringStatus()

	stopCh := make(chan struct{})
	go app.handleSignals(stopCh)

	if err := app.startSchedulers(stopCh); err != nil {
		return err
	}

	app.Coordinator.RunWithIntervals(app.Config, stopCh)
	log.Println("GWatch 正在退出...")
	return nil
}

// printMonitoringStatus 打印监控状态
func (app *App) printMonitoringStatus() {
	cfg := app.Config

	if cfg.HostMonitoring != nil && cfg.HostMonitoring.Enabled {
		log.Println("主机监控已启用，监控间隔:", cfg.HostMonitoring.Interval)
	} else if cfg.HostMonitoring != nil && !cfg.HostMonitoring.Enabled {
		log.Println("主机监控已禁用")
	}

	if cfg.AppMonitoring != nil && cfg.AppMonitoring.Enabled {
		log.Println("应用层监控已启用")
		if cfg.AppMonitoring.Redis != nil && cfg.AppMonitoring.Redis.Enabled {
			log.Println("  - Redis监控已启用")
		} else if cfg.AppMonitoring.Redis != nil && !cfg.AppMonitoring.Redis.Enabled {
			log.Println("  - Redis监控已禁用")
		}
		if cfg.AppMonitoring.MySQL != nil && cfg.AppMonitoring.MySQL.Enabled {
			log.Println("  - MySQL监控已启用")
		} else if cfg.AppMonitoring.MySQL != nil && !cfg.AppMonitoring.MySQL.Enabled {
			log.Println("  - MySQL监控已禁用")
		}
		if cfg.AppMonitoring.HTTP != nil && cfg.AppMonitoring.HTTP.Enabled {
			log.Println("  - HTTP监控已启用，监控间隔:", cfg.AppMonitoring.HTTP.Interval)
		} else if cfg.AppMonitoring.HTTP != nil && !cfg.AppMonitoring.HTTP.Enabled {
			log.Println("  - HTTP监控已禁用")
		}
		if cfg.AppMonitoring.Tickers != nil && cfg.AppMonitoring.Tickers.Enabled {
			log.Println("  - Tickers监控已启用")
		} else if cfg.AppMonitoring.Tickers != nil && !cfg.AppMonitoring.Tickers.Enabled {
			log.Println("  - Tickers监控已禁用")
		}
	} else if cfg.AppMonitoring != nil && !cfg.AppMonitoring.Enabled {
		log.Println("应用层监控已禁用")
	}
}

// handleSignals 处理系统信号
func (app *App) handleSignals(stopCh chan struct{}) {
	c := make(chan os.Signal, 1)
	signal.Notify(c, os.Interrupt, syscall.SIGTERM)
	sig := <-c
	log.Printf("接收到信号 %v，正在优雅退出...\n", sig)
	close(stopCh)
}

// startSchedulers 启动所有调度器
func (app *App) startSchedulers(stopCh <-chan struct{}) error {
	cfg := app.Config

	if cfg.AppMonitoring != nil && cfg.AppMonitoring.Enabled && cfg.AppMonitoring.Tickers != nil && cfg.AppMonitoring.Tickers.Enabled && len(cfg.AppMonitoring.Tickers.TickerInterfaces) > 0 {
		log.Println("启动定时器调度器...")
		if err := app.TickerScheduler.Start(cfg, stopCh); err != nil {
			log.Printf("启动定时器调度器失败: %v", err)
			return err
		}
	}

	if cfg.ScheduledPush != nil && cfg.ScheduledPush.Enabled {
		log.Println("启动全局定时推送调度器...")
		if err := app.ScheduledPushScheduler.Start(cfg, stopCh); err != nil {
			log.Printf("启动全局定时推送调度器失败: %v", err)
			return err
		}
	}

	return nil
}

// NewApp 创建应用程序实例
func NewApp(config2 *entity.Config,
	coordinator *usecase.Coordinator,
	tickerScheduler ticker.TickerScheduler,
	scheduledPushScheduler scheduled_push.ScheduledPushScheduler,
	loggerService *usecase.LoggerService,
) *App {
	return &App{
		Config:                 config2,
		Coordinator:            coordinator,
		TickerScheduler:        tickerScheduler,
		ScheduledPushScheduler: scheduledPushScheduler,
		LoggerService:          loggerService,
	}
}

// NewConfig 从配置提供者获取配置
func NewConfig(provider config.Provider) *entity.Config {
	return provider.GetConfig()
}
